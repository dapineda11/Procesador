// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2020 16:16:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_vlg_sample_tst(
	CU_ALU,
	Numero_A,
	Numero_B,
	Operacion,
	Reloj,
	Reset,
	sampler_tx
);
input  CU_ALU;
input [15:0] Numero_A;
input [15:0] Numero_B;
input [3:0] Operacion;
input  Reloj;
input  Reset;
output sampler_tx;

reg sample;
time current_time;
always @(CU_ALU or Numero_A or Numero_B or Operacion or Reloj or Reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module alu_vlg_check_tst (
	Banderas,
	Disponibilidad,
	Resultado_Respuesta,
	sampler_rx
);
input [3:0] Banderas;
input  Disponibilidad;
input [15:0] Resultado_Respuesta;
input sampler_rx;

reg [3:0] Banderas_expected;
reg  Disponibilidad_expected;
reg [15:0] Resultado_Respuesta_expected;

reg [3:0] Banderas_prev;
reg  Disponibilidad_prev;
reg [15:0] Resultado_Respuesta_prev;

reg [3:0] Banderas_expected_prev;
reg  Disponibilidad_expected_prev;
reg [15:0] Resultado_Respuesta_expected_prev;

reg [3:0] last_Banderas_exp;
reg  last_Disponibilidad_exp;
reg [15:0] last_Resultado_Respuesta_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Banderas_prev = Banderas;
	Disponibilidad_prev = Disponibilidad;
	Resultado_Respuesta_prev = Resultado_Respuesta;
end

// update expected /o prevs

always @(trigger)
begin
	Banderas_expected_prev = Banderas_expected;
	Disponibilidad_expected_prev = Disponibilidad_expected;
	Resultado_Respuesta_expected_prev = Resultado_Respuesta_expected;
end


// expected Banderas[ 3 ]
initial
begin
	Banderas_expected[3] = 1'bX;
end 
// expected Banderas[ 2 ]
initial
begin
	Banderas_expected[2] = 1'bX;
end 
// expected Banderas[ 1 ]
initial
begin
	Banderas_expected[1] = 1'bX;
end 
// expected Banderas[ 0 ]
initial
begin
	Banderas_expected[0] = 1'bX;
end 

// expected Disponibilidad
initial
begin
	Disponibilidad_expected = 1'bX;
end 
// expected Resultado_Respuesta[ 15 ]
initial
begin
	Resultado_Respuesta_expected[15] = 1'bX;
end 
// expected Resultado_Respuesta[ 14 ]
initial
begin
	Resultado_Respuesta_expected[14] = 1'bX;
end 
// expected Resultado_Respuesta[ 13 ]
initial
begin
	Resultado_Respuesta_expected[13] = 1'bX;
end 
// expected Resultado_Respuesta[ 12 ]
initial
begin
	Resultado_Respuesta_expected[12] = 1'bX;
end 
// expected Resultado_Respuesta[ 11 ]
initial
begin
	Resultado_Respuesta_expected[11] = 1'bX;
end 
// expected Resultado_Respuesta[ 10 ]
initial
begin
	Resultado_Respuesta_expected[10] = 1'bX;
end 
// expected Resultado_Respuesta[ 9 ]
initial
begin
	Resultado_Respuesta_expected[9] = 1'bX;
end 
// expected Resultado_Respuesta[ 8 ]
initial
begin
	Resultado_Respuesta_expected[8] = 1'bX;
end 
// expected Resultado_Respuesta[ 7 ]
initial
begin
	Resultado_Respuesta_expected[7] = 1'bX;
end 
// expected Resultado_Respuesta[ 6 ]
initial
begin
	Resultado_Respuesta_expected[6] = 1'bX;
end 
// expected Resultado_Respuesta[ 5 ]
initial
begin
	Resultado_Respuesta_expected[5] = 1'bX;
end 
// expected Resultado_Respuesta[ 4 ]
initial
begin
	Resultado_Respuesta_expected[4] = 1'bX;
end 
// expected Resultado_Respuesta[ 3 ]
initial
begin
	Resultado_Respuesta_expected[3] = 1'bX;
end 
// expected Resultado_Respuesta[ 2 ]
initial
begin
	Resultado_Respuesta_expected[2] = 1'bX;
end 
// expected Resultado_Respuesta[ 1 ]
initial
begin
	Resultado_Respuesta_expected[1] = 1'bX;
end 
// expected Resultado_Respuesta[ 0 ]
initial
begin
	Resultado_Respuesta_expected[0] = 1'bX;
end 
// generate trigger
always @(Banderas_expected or Banderas or Disponibilidad_expected or Disponibilidad or Resultado_Respuesta_expected or Resultado_Respuesta)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Banderas = %b | expected Disponibilidad = %b | expected Resultado_Respuesta = %b | ",Banderas_expected_prev,Disponibilidad_expected_prev,Resultado_Respuesta_expected_prev);
	$display("| real Banderas = %b | real Disponibilidad = %b | real Resultado_Respuesta = %b | ",Banderas_prev,Disponibilidad_prev,Resultado_Respuesta_prev);
`endif
	if (
		( Banderas_expected_prev[0] !== 1'bx ) && ( Banderas_prev[0] !== Banderas_expected_prev[0] )
		&& ((Banderas_expected_prev[0] !== last_Banderas_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Banderas[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Banderas_expected_prev);
		$display ("     Real value = %b", Banderas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Banderas_exp[0] = Banderas_expected_prev[0];
	end
	if (
		( Banderas_expected_prev[1] !== 1'bx ) && ( Banderas_prev[1] !== Banderas_expected_prev[1] )
		&& ((Banderas_expected_prev[1] !== last_Banderas_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Banderas[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Banderas_expected_prev);
		$display ("     Real value = %b", Banderas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Banderas_exp[1] = Banderas_expected_prev[1];
	end
	if (
		( Banderas_expected_prev[2] !== 1'bx ) && ( Banderas_prev[2] !== Banderas_expected_prev[2] )
		&& ((Banderas_expected_prev[2] !== last_Banderas_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Banderas[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Banderas_expected_prev);
		$display ("     Real value = %b", Banderas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Banderas_exp[2] = Banderas_expected_prev[2];
	end
	if (
		( Banderas_expected_prev[3] !== 1'bx ) && ( Banderas_prev[3] !== Banderas_expected_prev[3] )
		&& ((Banderas_expected_prev[3] !== last_Banderas_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Banderas[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Banderas_expected_prev);
		$display ("     Real value = %b", Banderas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Banderas_exp[3] = Banderas_expected_prev[3];
	end
	if (
		( Disponibilidad_expected_prev !== 1'bx ) && ( Disponibilidad_prev !== Disponibilidad_expected_prev )
		&& ((Disponibilidad_expected_prev !== last_Disponibilidad_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disponibilidad :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disponibilidad_expected_prev);
		$display ("     Real value = %b", Disponibilidad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Disponibilidad_exp = Disponibilidad_expected_prev;
	end
	if (
		( Resultado_Respuesta_expected_prev[0] !== 1'bx ) && ( Resultado_Respuesta_prev[0] !== Resultado_Respuesta_expected_prev[0] )
		&& ((Resultado_Respuesta_expected_prev[0] !== last_Resultado_Respuesta_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[0] = Resultado_Respuesta_expected_prev[0];
	end
	if (
		( Resultado_Respuesta_expected_prev[1] !== 1'bx ) && ( Resultado_Respuesta_prev[1] !== Resultado_Respuesta_expected_prev[1] )
		&& ((Resultado_Respuesta_expected_prev[1] !== last_Resultado_Respuesta_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[1] = Resultado_Respuesta_expected_prev[1];
	end
	if (
		( Resultado_Respuesta_expected_prev[2] !== 1'bx ) && ( Resultado_Respuesta_prev[2] !== Resultado_Respuesta_expected_prev[2] )
		&& ((Resultado_Respuesta_expected_prev[2] !== last_Resultado_Respuesta_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[2] = Resultado_Respuesta_expected_prev[2];
	end
	if (
		( Resultado_Respuesta_expected_prev[3] !== 1'bx ) && ( Resultado_Respuesta_prev[3] !== Resultado_Respuesta_expected_prev[3] )
		&& ((Resultado_Respuesta_expected_prev[3] !== last_Resultado_Respuesta_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[3] = Resultado_Respuesta_expected_prev[3];
	end
	if (
		( Resultado_Respuesta_expected_prev[4] !== 1'bx ) && ( Resultado_Respuesta_prev[4] !== Resultado_Respuesta_expected_prev[4] )
		&& ((Resultado_Respuesta_expected_prev[4] !== last_Resultado_Respuesta_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[4] = Resultado_Respuesta_expected_prev[4];
	end
	if (
		( Resultado_Respuesta_expected_prev[5] !== 1'bx ) && ( Resultado_Respuesta_prev[5] !== Resultado_Respuesta_expected_prev[5] )
		&& ((Resultado_Respuesta_expected_prev[5] !== last_Resultado_Respuesta_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[5] = Resultado_Respuesta_expected_prev[5];
	end
	if (
		( Resultado_Respuesta_expected_prev[6] !== 1'bx ) && ( Resultado_Respuesta_prev[6] !== Resultado_Respuesta_expected_prev[6] )
		&& ((Resultado_Respuesta_expected_prev[6] !== last_Resultado_Respuesta_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[6] = Resultado_Respuesta_expected_prev[6];
	end
	if (
		( Resultado_Respuesta_expected_prev[7] !== 1'bx ) && ( Resultado_Respuesta_prev[7] !== Resultado_Respuesta_expected_prev[7] )
		&& ((Resultado_Respuesta_expected_prev[7] !== last_Resultado_Respuesta_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[7] = Resultado_Respuesta_expected_prev[7];
	end
	if (
		( Resultado_Respuesta_expected_prev[8] !== 1'bx ) && ( Resultado_Respuesta_prev[8] !== Resultado_Respuesta_expected_prev[8] )
		&& ((Resultado_Respuesta_expected_prev[8] !== last_Resultado_Respuesta_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[8] = Resultado_Respuesta_expected_prev[8];
	end
	if (
		( Resultado_Respuesta_expected_prev[9] !== 1'bx ) && ( Resultado_Respuesta_prev[9] !== Resultado_Respuesta_expected_prev[9] )
		&& ((Resultado_Respuesta_expected_prev[9] !== last_Resultado_Respuesta_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[9] = Resultado_Respuesta_expected_prev[9];
	end
	if (
		( Resultado_Respuesta_expected_prev[10] !== 1'bx ) && ( Resultado_Respuesta_prev[10] !== Resultado_Respuesta_expected_prev[10] )
		&& ((Resultado_Respuesta_expected_prev[10] !== last_Resultado_Respuesta_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[10] = Resultado_Respuesta_expected_prev[10];
	end
	if (
		( Resultado_Respuesta_expected_prev[11] !== 1'bx ) && ( Resultado_Respuesta_prev[11] !== Resultado_Respuesta_expected_prev[11] )
		&& ((Resultado_Respuesta_expected_prev[11] !== last_Resultado_Respuesta_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[11] = Resultado_Respuesta_expected_prev[11];
	end
	if (
		( Resultado_Respuesta_expected_prev[12] !== 1'bx ) && ( Resultado_Respuesta_prev[12] !== Resultado_Respuesta_expected_prev[12] )
		&& ((Resultado_Respuesta_expected_prev[12] !== last_Resultado_Respuesta_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[12] = Resultado_Respuesta_expected_prev[12];
	end
	if (
		( Resultado_Respuesta_expected_prev[13] !== 1'bx ) && ( Resultado_Respuesta_prev[13] !== Resultado_Respuesta_expected_prev[13] )
		&& ((Resultado_Respuesta_expected_prev[13] !== last_Resultado_Respuesta_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[13] = Resultado_Respuesta_expected_prev[13];
	end
	if (
		( Resultado_Respuesta_expected_prev[14] !== 1'bx ) && ( Resultado_Respuesta_prev[14] !== Resultado_Respuesta_expected_prev[14] )
		&& ((Resultado_Respuesta_expected_prev[14] !== last_Resultado_Respuesta_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[14] = Resultado_Respuesta_expected_prev[14];
	end
	if (
		( Resultado_Respuesta_expected_prev[15] !== 1'bx ) && ( Resultado_Respuesta_prev[15] !== Resultado_Respuesta_expected_prev[15] )
		&& ((Resultado_Respuesta_expected_prev[15] !== last_Resultado_Respuesta_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Respuesta[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Respuesta_expected_prev);
		$display ("     Real value = %b", Resultado_Respuesta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_Respuesta_exp[15] = Resultado_Respuesta_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CU_ALU;
reg [15:0] Numero_A;
reg [15:0] Numero_B;
reg [3:0] Operacion;
reg Reloj;
reg Reset;
// wires                                               
wire [3:0] Banderas;
wire Disponibilidad;
wire [15:0] Resultado_Respuesta;

wire sampler;                             

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.Banderas(Banderas),
	.CU_ALU(CU_ALU),
	.Disponibilidad(Disponibilidad),
	.Numero_A(Numero_A),
	.Numero_B(Numero_B),
	.Operacion(Operacion),
	.Reloj(Reloj),
	.Reset(Reset),
	.Resultado_Respuesta(Resultado_Respuesta)
);

// Reloj
always
begin
	Reloj = 1'b0;
	Reloj = #10000 1'b1;
	#10000;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #20000 1'b1;
end 
// Numero_A[ 15 ]
initial
begin
	Numero_A[15] = 1'b0;
end 
// Numero_A[ 14 ]
initial
begin
	Numero_A[14] = 1'b0;
end 
// Numero_A[ 13 ]
initial
begin
	Numero_A[13] = 1'b0;
end 
// Numero_A[ 12 ]
initial
begin
	Numero_A[12] = 1'b0;
end 
// Numero_A[ 11 ]
initial
begin
	Numero_A[11] = 1'b0;
end 
// Numero_A[ 10 ]
initial
begin
	Numero_A[10] = 1'b0;
end 
// Numero_A[ 9 ]
initial
begin
	Numero_A[9] = 1'b0;
end 
// Numero_A[ 8 ]
initial
begin
	Numero_A[8] = 1'b0;
end 
// Numero_A[ 7 ]
initial
begin
	Numero_A[7] = 1'b0;
end 
// Numero_A[ 6 ]
initial
begin
	Numero_A[6] = 1'b0;
end 
// Numero_A[ 5 ]
initial
begin
	Numero_A[5] = 1'b0;
end 
// Numero_A[ 4 ]
initial
begin
	Numero_A[4] = 1'b0;
end 
// Numero_A[ 3 ]
initial
begin
	Numero_A[3] = 1'b0;
end 
// Numero_A[ 2 ]
initial
begin
	Numero_A[2] = 1'b0;
end 
// Numero_A[ 1 ]
initial
begin
	Numero_A[1] = 1'b1;
end 
// Numero_A[ 0 ]
initial
begin
	Numero_A[0] = 1'b0;
end 
// Numero_B[ 15 ]
initial
begin
	Numero_B[15] = 1'b0;
end 
// Numero_B[ 14 ]
initial
begin
	Numero_B[14] = 1'b0;
end 
// Numero_B[ 13 ]
initial
begin
	Numero_B[13] = 1'b0;
end 
// Numero_B[ 12 ]
initial
begin
	Numero_B[12] = 1'b0;
end 
// Numero_B[ 11 ]
initial
begin
	Numero_B[11] = 1'b0;
end 
// Numero_B[ 10 ]
initial
begin
	Numero_B[10] = 1'b0;
end 
// Numero_B[ 9 ]
initial
begin
	Numero_B[9] = 1'b0;
end 
// Numero_B[ 8 ]
initial
begin
	Numero_B[8] = 1'b0;
end 
// Numero_B[ 7 ]
initial
begin
	Numero_B[7] = 1'b0;
end 
// Numero_B[ 6 ]
initial
begin
	Numero_B[6] = 1'b0;
end 
// Numero_B[ 5 ]
initial
begin
	Numero_B[5] = 1'b0;
end 
// Numero_B[ 4 ]
initial
begin
	Numero_B[4] = 1'b0;
end 
// Numero_B[ 3 ]
initial
begin
	Numero_B[3] = 1'b0;
end 
// Numero_B[ 2 ]
initial
begin
	Numero_B[2] = 1'b0;
end 
// Numero_B[ 1 ]
initial
begin
	Numero_B[1] = 1'b1;
end 
// Numero_B[ 0 ]
initial
begin
	Numero_B[0] = 1'b1;
end 

// CU_ALU
initial
begin
	CU_ALU = 1'b0;
	CU_ALU = #10000 1'b1;
	CU_ALU = #530000 1'b0;
end 
// Operacion[ 3 ]
initial
begin
	Operacion[3] = 1'b0;
end 
// Operacion[ 2 ]
initial
begin
	Operacion[2] = 1'b1;
end 
// Operacion[ 1 ]
initial
begin
	Operacion[1] = 1'b0;
end 
// Operacion[ 0 ]
initial
begin
	Operacion[0] = 1'b1;
end 

alu_vlg_sample_tst tb_sample (
	.CU_ALU(CU_ALU),
	.Numero_A(Numero_A),
	.Numero_B(Numero_B),
	.Operacion(Operacion),
	.Reloj(Reloj),
	.Reset(Reset),
	.sampler_tx(sampler)
);

alu_vlg_check_tst tb_out(
	.Banderas(Banderas),
	.Disponibilidad(Disponibilidad),
	.Resultado_Respuesta(Resultado_Respuesta),
	.sampler_rx(sampler)
);
endmodule

