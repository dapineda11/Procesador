// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/15/2020 11:20:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AR_vlg_sample_tst(
	CU_AR,
	DR_AR,
	IR_AR,
	reloj,
	Restaurar,
	SP_AR,
	sampler_tx
);
input [4:0] CU_AR;
input [9:0] DR_AR;
input [8:0] IR_AR;
input  reloj;
input  Restaurar;
input [9:0] SP_AR;
output sampler_tx;

reg sample;
time current_time;
always @(CU_AR or DR_AR or IR_AR or reloj or Restaurar or SP_AR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AR_vlg_check_tst (
	AR_PC,
	Direccion_RWM,
	sampler_rx
);
input [9:0] AR_PC;
input [9:0] Direccion_RWM;
input sampler_rx;

reg [9:0] AR_PC_expected;
reg [9:0] Direccion_RWM_expected;

reg [9:0] AR_PC_prev;
reg [9:0] Direccion_RWM_prev;

reg [9:0] AR_PC_expected_prev;
reg [9:0] Direccion_RWM_expected_prev;

reg [9:0] last_AR_PC_exp;
reg [9:0] last_Direccion_RWM_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	AR_PC_prev = AR_PC;
	Direccion_RWM_prev = Direccion_RWM;
end

// update expected /o prevs

always @(trigger)
begin
	AR_PC_expected_prev = AR_PC_expected;
	Direccion_RWM_expected_prev = Direccion_RWM_expected;
end


// expected AR_PC[ 9 ]
initial
begin
	AR_PC_expected[9] = 1'bX;
end 
// expected AR_PC[ 8 ]
initial
begin
	AR_PC_expected[8] = 1'bX;
end 
// expected AR_PC[ 7 ]
initial
begin
	AR_PC_expected[7] = 1'bX;
end 
// expected AR_PC[ 6 ]
initial
begin
	AR_PC_expected[6] = 1'bX;
end 
// expected AR_PC[ 5 ]
initial
begin
	AR_PC_expected[5] = 1'bX;
end 
// expected AR_PC[ 4 ]
initial
begin
	AR_PC_expected[4] = 1'bX;
end 
// expected AR_PC[ 3 ]
initial
begin
	AR_PC_expected[3] = 1'bX;
end 
// expected AR_PC[ 2 ]
initial
begin
	AR_PC_expected[2] = 1'bX;
end 
// expected AR_PC[ 1 ]
initial
begin
	AR_PC_expected[1] = 1'bX;
end 
// expected AR_PC[ 0 ]
initial
begin
	AR_PC_expected[0] = 1'bX;
end 
// expected Direccion_RWM[ 9 ]
initial
begin
	Direccion_RWM_expected[9] = 1'bX;
end 
// expected Direccion_RWM[ 8 ]
initial
begin
	Direccion_RWM_expected[8] = 1'bX;
end 
// expected Direccion_RWM[ 7 ]
initial
begin
	Direccion_RWM_expected[7] = 1'bX;
end 
// expected Direccion_RWM[ 6 ]
initial
begin
	Direccion_RWM_expected[6] = 1'bX;
end 
// expected Direccion_RWM[ 5 ]
initial
begin
	Direccion_RWM_expected[5] = 1'bX;
end 
// expected Direccion_RWM[ 4 ]
initial
begin
	Direccion_RWM_expected[4] = 1'bX;
end 
// expected Direccion_RWM[ 3 ]
initial
begin
	Direccion_RWM_expected[3] = 1'bX;
end 
// expected Direccion_RWM[ 2 ]
initial
begin
	Direccion_RWM_expected[2] = 1'bX;
end 
// expected Direccion_RWM[ 1 ]
initial
begin
	Direccion_RWM_expected[1] = 1'bX;
end 
// expected Direccion_RWM[ 0 ]
initial
begin
	Direccion_RWM_expected[0] = 1'bX;
end 
// generate trigger
always @(AR_PC_expected or AR_PC or Direccion_RWM_expected or Direccion_RWM)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AR_PC = %b | expected Direccion_RWM = %b | ",AR_PC_expected_prev,Direccion_RWM_expected_prev);
	$display("| real AR_PC = %b | real Direccion_RWM = %b | ",AR_PC_prev,Direccion_RWM_prev);
`endif
	if (
		( AR_PC_expected_prev[0] !== 1'bx ) && ( AR_PC_prev[0] !== AR_PC_expected_prev[0] )
		&& ((AR_PC_expected_prev[0] !== last_AR_PC_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_PC_expected_prev);
		$display ("     Real value = %b", AR_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_PC_exp[0] = AR_PC_expected_prev[0];
	end
	if (
		( AR_PC_expected_prev[1] !== 1'bx ) && ( AR_PC_prev[1] !== AR_PC_expected_prev[1] )
		&& ((AR_PC_expected_prev[1] !== last_AR_PC_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_PC_expected_prev);
		$display ("     Real value = %b", AR_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_PC_exp[1] = AR_PC_expected_prev[1];
	end
	if (
		( AR_PC_expected_prev[2] !== 1'bx ) && ( AR_PC_prev[2] !== AR_PC_expected_prev[2] )
		&& ((AR_PC_expected_prev[2] !== last_AR_PC_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_PC_expected_prev);
		$display ("     Real value = %b", AR_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_PC_exp[2] = AR_PC_expected_prev[2];
	end
	if (
		( AR_PC_expected_prev[3] !== 1'bx ) && ( AR_PC_prev[3] !== AR_PC_expected_prev[3] )
		&& ((AR_PC_expected_prev[3] !== last_AR_PC_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_PC_expected_prev);
		$display ("     Real value = %b", AR_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_PC_exp[3] = AR_PC_expected_prev[3];
	end
	if (
		( AR_PC_expected_prev[4] !== 1'bx ) && ( AR_PC_prev[4] !== AR_PC_expected_prev[4] )
		&& ((AR_PC_expected_prev[4] !== last_AR_PC_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_PC_expected_prev);
		$display ("     Real value = %b", AR_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_PC_exp[4] = AR_PC_expected_prev[4];
	end
	if (
		( AR_PC_expected_prev[5] !== 1'bx ) && ( AR_PC_prev[5] !== AR_PC_expected_prev[5] )
		&& ((AR_PC_expected_prev[5] !== last_AR_PC_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_PC_expected_prev);
		$display ("     Real value = %b", AR_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_PC_exp[5] = AR_PC_expected_prev[5];
	end
	if (
		( AR_PC_expected_prev[6] !== 1'bx ) && ( AR_PC_prev[6] !== AR_PC_expected_prev[6] )
		&& ((AR_PC_expected_prev[6] !== last_AR_PC_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_PC_expected_prev);
		$display ("     Real value = %b", AR_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_PC_exp[6] = AR_PC_expected_prev[6];
	end
	if (
		( AR_PC_expected_prev[7] !== 1'bx ) && ( AR_PC_prev[7] !== AR_PC_expected_prev[7] )
		&& ((AR_PC_expected_prev[7] !== last_AR_PC_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_PC_expected_prev);
		$display ("     Real value = %b", AR_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_PC_exp[7] = AR_PC_expected_prev[7];
	end
	if (
		( AR_PC_expected_prev[8] !== 1'bx ) && ( AR_PC_prev[8] !== AR_PC_expected_prev[8] )
		&& ((AR_PC_expected_prev[8] !== last_AR_PC_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_PC_expected_prev);
		$display ("     Real value = %b", AR_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_PC_exp[8] = AR_PC_expected_prev[8];
	end
	if (
		( AR_PC_expected_prev[9] !== 1'bx ) && ( AR_PC_prev[9] !== AR_PC_expected_prev[9] )
		&& ((AR_PC_expected_prev[9] !== last_AR_PC_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_PC_expected_prev);
		$display ("     Real value = %b", AR_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AR_PC_exp[9] = AR_PC_expected_prev[9];
	end
	if (
		( Direccion_RWM_expected_prev[0] !== 1'bx ) && ( Direccion_RWM_prev[0] !== Direccion_RWM_expected_prev[0] )
		&& ((Direccion_RWM_expected_prev[0] !== last_Direccion_RWM_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_RWM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_RWM_expected_prev);
		$display ("     Real value = %b", Direccion_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Direccion_RWM_exp[0] = Direccion_RWM_expected_prev[0];
	end
	if (
		( Direccion_RWM_expected_prev[1] !== 1'bx ) && ( Direccion_RWM_prev[1] !== Direccion_RWM_expected_prev[1] )
		&& ((Direccion_RWM_expected_prev[1] !== last_Direccion_RWM_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_RWM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_RWM_expected_prev);
		$display ("     Real value = %b", Direccion_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Direccion_RWM_exp[1] = Direccion_RWM_expected_prev[1];
	end
	if (
		( Direccion_RWM_expected_prev[2] !== 1'bx ) && ( Direccion_RWM_prev[2] !== Direccion_RWM_expected_prev[2] )
		&& ((Direccion_RWM_expected_prev[2] !== last_Direccion_RWM_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_RWM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_RWM_expected_prev);
		$display ("     Real value = %b", Direccion_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Direccion_RWM_exp[2] = Direccion_RWM_expected_prev[2];
	end
	if (
		( Direccion_RWM_expected_prev[3] !== 1'bx ) && ( Direccion_RWM_prev[3] !== Direccion_RWM_expected_prev[3] )
		&& ((Direccion_RWM_expected_prev[3] !== last_Direccion_RWM_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_RWM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_RWM_expected_prev);
		$display ("     Real value = %b", Direccion_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Direccion_RWM_exp[3] = Direccion_RWM_expected_prev[3];
	end
	if (
		( Direccion_RWM_expected_prev[4] !== 1'bx ) && ( Direccion_RWM_prev[4] !== Direccion_RWM_expected_prev[4] )
		&& ((Direccion_RWM_expected_prev[4] !== last_Direccion_RWM_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_RWM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_RWM_expected_prev);
		$display ("     Real value = %b", Direccion_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Direccion_RWM_exp[4] = Direccion_RWM_expected_prev[4];
	end
	if (
		( Direccion_RWM_expected_prev[5] !== 1'bx ) && ( Direccion_RWM_prev[5] !== Direccion_RWM_expected_prev[5] )
		&& ((Direccion_RWM_expected_prev[5] !== last_Direccion_RWM_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_RWM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_RWM_expected_prev);
		$display ("     Real value = %b", Direccion_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Direccion_RWM_exp[5] = Direccion_RWM_expected_prev[5];
	end
	if (
		( Direccion_RWM_expected_prev[6] !== 1'bx ) && ( Direccion_RWM_prev[6] !== Direccion_RWM_expected_prev[6] )
		&& ((Direccion_RWM_expected_prev[6] !== last_Direccion_RWM_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_RWM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_RWM_expected_prev);
		$display ("     Real value = %b", Direccion_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Direccion_RWM_exp[6] = Direccion_RWM_expected_prev[6];
	end
	if (
		( Direccion_RWM_expected_prev[7] !== 1'bx ) && ( Direccion_RWM_prev[7] !== Direccion_RWM_expected_prev[7] )
		&& ((Direccion_RWM_expected_prev[7] !== last_Direccion_RWM_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_RWM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_RWM_expected_prev);
		$display ("     Real value = %b", Direccion_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Direccion_RWM_exp[7] = Direccion_RWM_expected_prev[7];
	end
	if (
		( Direccion_RWM_expected_prev[8] !== 1'bx ) && ( Direccion_RWM_prev[8] !== Direccion_RWM_expected_prev[8] )
		&& ((Direccion_RWM_expected_prev[8] !== last_Direccion_RWM_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_RWM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_RWM_expected_prev);
		$display ("     Real value = %b", Direccion_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Direccion_RWM_exp[8] = Direccion_RWM_expected_prev[8];
	end
	if (
		( Direccion_RWM_expected_prev[9] !== 1'bx ) && ( Direccion_RWM_prev[9] !== Direccion_RWM_expected_prev[9] )
		&& ((Direccion_RWM_expected_prev[9] !== last_Direccion_RWM_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_RWM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_RWM_expected_prev);
		$display ("     Real value = %b", Direccion_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Direccion_RWM_exp[9] = Direccion_RWM_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] CU_AR;
reg [9:0] DR_AR;
reg [8:0] IR_AR;
reg reloj;
reg Restaurar;
reg [9:0] SP_AR;
// wires                                               
wire [9:0] AR_PC;
wire [9:0] Direccion_RWM;

wire sampler;                             

// assign statements (if any)                          
AR i1 (
// port map - connection between master ports and signals/registers   
	.AR_PC(AR_PC),
	.CU_AR(CU_AR),
	.Direccion_RWM(Direccion_RWM),
	.DR_AR(DR_AR),
	.IR_AR(IR_AR),
	.reloj(reloj),
	.Restaurar(Restaurar),
	.SP_AR(SP_AR)
);
// DR_AR[ 9 ]
initial
begin
	DR_AR[9] = 1'b0;
end 
// DR_AR[ 8 ]
initial
begin
	DR_AR[8] = 1'b0;
	DR_AR[8] = #40000 1'b1;
	DR_AR[8] = #290000 1'b0;
end 
// DR_AR[ 7 ]
initial
begin
	DR_AR[7] = 1'b0;
	DR_AR[7] = #40000 1'b1;
	DR_AR[7] = #290000 1'b0;
end 
// DR_AR[ 6 ]
initial
begin
	DR_AR[6] = 1'b0;
	DR_AR[6] = #40000 1'b1;
	DR_AR[6] = #290000 1'b0;
end 
// DR_AR[ 5 ]
initial
begin
	DR_AR[5] = 1'b0;
	DR_AR[5] = #40000 1'b1;
	DR_AR[5] = #290000 1'b0;
end 
// DR_AR[ 4 ]
initial
begin
	DR_AR[4] = 1'b0;
end 
// DR_AR[ 3 ]
initial
begin
	DR_AR[3] = 1'b0;
end 
// DR_AR[ 2 ]
initial
begin
	DR_AR[2] = 1'b0;
end 
// DR_AR[ 1 ]
initial
begin
	DR_AR[1] = 1'b0;
end 
// DR_AR[ 0 ]
initial
begin
	DR_AR[0] = 1'b0;
end 
// IR_AR[ 8 ]
initial
begin
	IR_AR[8] = 1'b0;
end 
// IR_AR[ 7 ]
initial
begin
	IR_AR[7] = 1'b0;
end 
// IR_AR[ 6 ]
initial
begin
	IR_AR[6] = 1'b0;
end 
// IR_AR[ 5 ]
initial
begin
	IR_AR[5] = 1'b1;
end 
// IR_AR[ 4 ]
initial
begin
	IR_AR[4] = 1'b0;
end 
// IR_AR[ 3 ]
initial
begin
	IR_AR[3] = 1'b1;
end 
// IR_AR[ 2 ]
initial
begin
	IR_AR[2] = 1'b1;
end 
// IR_AR[ 1 ]
initial
begin
	IR_AR[1] = 1'b0;
end 
// IR_AR[ 0 ]
initial
begin
	IR_AR[0] = 1'b1;
end 

// reloj
always
begin
	reloj = 1'b0;
	reloj = #10000 1'b1;
	#10000;
end 

// Restaurar
initial
begin
	Restaurar = 1'b0;
end 
// SP_AR[ 9 ]
initial
begin
	SP_AR[9] = 1'b1;
end 
// SP_AR[ 8 ]
initial
begin
	SP_AR[8] = 1'b0;
end 
// SP_AR[ 7 ]
initial
begin
	SP_AR[7] = 1'b0;
end 
// SP_AR[ 6 ]
initial
begin
	SP_AR[6] = 1'b0;
end 
// SP_AR[ 5 ]
initial
begin
	SP_AR[5] = 1'b1;
end 
// SP_AR[ 4 ]
initial
begin
	SP_AR[4] = 1'b0;
end 
// SP_AR[ 3 ]
initial
begin
	SP_AR[3] = 1'b1;
end 
// SP_AR[ 2 ]
initial
begin
	SP_AR[2] = 1'b0;
end 
// SP_AR[ 1 ]
initial
begin
	SP_AR[1] = 1'b1;
end 
// SP_AR[ 0 ]
initial
begin
	SP_AR[0] = 1'b1;
end 
// CU_AR[ 4 ]
initial
begin
	CU_AR[4] = 1'b0;
	CU_AR[4] = #60000 1'b1;
	CU_AR[4] = #10000 1'b0;
end 
// CU_AR[ 3 ]
initial
begin
	CU_AR[3] = 1'b0;
end 
// CU_AR[ 2 ]
initial
begin
	CU_AR[2] = 1'b0;
	CU_AR[2] = #60000 1'b1;
	CU_AR[2] = #10000 1'b0;
end 
// CU_AR[ 1 ]
initial
begin
	CU_AR[1] = 1'b0;
end 
// CU_AR[ 0 ]
initial
begin
	CU_AR[0] = 1'b0;
end 

AR_vlg_sample_tst tb_sample (
	.CU_AR(CU_AR),
	.DR_AR(DR_AR),
	.IR_AR(IR_AR),
	.reloj(reloj),
	.Restaurar(Restaurar),
	.SP_AR(SP_AR),
	.sampler_tx(sampler)
);

AR_vlg_check_tst tb_out(
	.AR_PC(AR_PC),
	.Direccion_RWM(Direccion_RWM),
	.sampler_rx(sampler)
);
endmodule

