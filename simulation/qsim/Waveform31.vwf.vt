// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/19/2020 02:11:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_vlg_sample_tst(
	AR_PC,
	CU_PC,
	Direccion_Interrupcion_PC,
	DR_PC,
	Reloj,
	Restaurar,
	sampler_tx
);
input [9:0] AR_PC;
input [3:0] CU_PC;
input [9:0] Direccion_Interrupcion_PC;
input [9:0] DR_PC;
input  Reloj;
input  Restaurar;
output sampler_tx;

reg sample;
time current_time;
always @(AR_PC or CU_PC or Direccion_Interrupcion_PC or DR_PC or Reloj or Restaurar)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PC_vlg_check_tst (
	Direccion_ROM,
	PC_DR,
	sampler_rx
);
input [9:0] Direccion_ROM;
input [9:0] PC_DR;
input sampler_rx;

reg [9:0] Direccion_ROM_expected;
reg [9:0] PC_DR_expected;

reg [9:0] Direccion_ROM_prev;
reg [9:0] PC_DR_prev;

reg [9:0] Direccion_ROM_expected_prev;
reg [9:0] PC_DR_expected_prev;

reg [9:0] last_Direccion_ROM_exp;
reg [9:0] last_PC_DR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Direccion_ROM_prev = Direccion_ROM;
	PC_DR_prev = PC_DR;
end

// update expected /o prevs

always @(trigger)
begin
	Direccion_ROM_expected_prev = Direccion_ROM_expected;
	PC_DR_expected_prev = PC_DR_expected;
end


// expected PC_DR[ 9 ]
initial
begin
	PC_DR_expected[9] = 1'bX;
end 
// expected PC_DR[ 8 ]
initial
begin
	PC_DR_expected[8] = 1'bX;
end 
// expected PC_DR[ 7 ]
initial
begin
	PC_DR_expected[7] = 1'bX;
end 
// expected PC_DR[ 6 ]
initial
begin
	PC_DR_expected[6] = 1'bX;
end 
// expected PC_DR[ 5 ]
initial
begin
	PC_DR_expected[5] = 1'bX;
end 
// expected PC_DR[ 4 ]
initial
begin
	PC_DR_expected[4] = 1'bX;
end 
// expected PC_DR[ 3 ]
initial
begin
	PC_DR_expected[3] = 1'bX;
end 
// expected PC_DR[ 2 ]
initial
begin
	PC_DR_expected[2] = 1'bX;
end 
// expected PC_DR[ 1 ]
initial
begin
	PC_DR_expected[1] = 1'bX;
end 
// expected PC_DR[ 0 ]
initial
begin
	PC_DR_expected[0] = 1'bX;
end 
// expected Direccion_ROM[ 9 ]
initial
begin
	Direccion_ROM_expected[9] = 1'bX;
end 
// expected Direccion_ROM[ 8 ]
initial
begin
	Direccion_ROM_expected[8] = 1'bX;
end 
// expected Direccion_ROM[ 7 ]
initial
begin
	Direccion_ROM_expected[7] = 1'bX;
end 
// expected Direccion_ROM[ 6 ]
initial
begin
	Direccion_ROM_expected[6] = 1'bX;
end 
// expected Direccion_ROM[ 5 ]
initial
begin
	Direccion_ROM_expected[5] = 1'bX;
end 
// expected Direccion_ROM[ 4 ]
initial
begin
	Direccion_ROM_expected[4] = 1'bX;
end 
// expected Direccion_ROM[ 3 ]
initial
begin
	Direccion_ROM_expected[3] = 1'bX;
end 
// expected Direccion_ROM[ 2 ]
initial
begin
	Direccion_ROM_expected[2] = 1'bX;
end 
// expected Direccion_ROM[ 1 ]
initial
begin
	Direccion_ROM_expected[1] = 1'bX;
end 
// expected Direccion_ROM[ 0 ]
initial
begin
	Direccion_ROM_expected[0] = 1'bX;
end 
// generate trigger
always @(Direccion_ROM_expected or Direccion_ROM or PC_DR_expected or PC_DR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Direccion_ROM = %b | expected PC_DR = %b | ",Direccion_ROM_expected_prev,PC_DR_expected_prev);
	$display("| real Direccion_ROM = %b | real PC_DR = %b | ",Direccion_ROM_prev,PC_DR_prev);
`endif
	if (
		( Direccion_ROM_expected_prev[0] !== 1'bx ) && ( Direccion_ROM_prev[0] !== Direccion_ROM_expected_prev[0] )
		&& ((Direccion_ROM_expected_prev[0] !== last_Direccion_ROM_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Direccion_ROM_exp[0] = Direccion_ROM_expected_prev[0];
	end
	if (
		( Direccion_ROM_expected_prev[1] !== 1'bx ) && ( Direccion_ROM_prev[1] !== Direccion_ROM_expected_prev[1] )
		&& ((Direccion_ROM_expected_prev[1] !== last_Direccion_ROM_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Direccion_ROM_exp[1] = Direccion_ROM_expected_prev[1];
	end
	if (
		( Direccion_ROM_expected_prev[2] !== 1'bx ) && ( Direccion_ROM_prev[2] !== Direccion_ROM_expected_prev[2] )
		&& ((Direccion_ROM_expected_prev[2] !== last_Direccion_ROM_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Direccion_ROM_exp[2] = Direccion_ROM_expected_prev[2];
	end
	if (
		( Direccion_ROM_expected_prev[3] !== 1'bx ) && ( Direccion_ROM_prev[3] !== Direccion_ROM_expected_prev[3] )
		&& ((Direccion_ROM_expected_prev[3] !== last_Direccion_ROM_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Direccion_ROM_exp[3] = Direccion_ROM_expected_prev[3];
	end
	if (
		( Direccion_ROM_expected_prev[4] !== 1'bx ) && ( Direccion_ROM_prev[4] !== Direccion_ROM_expected_prev[4] )
		&& ((Direccion_ROM_expected_prev[4] !== last_Direccion_ROM_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Direccion_ROM_exp[4] = Direccion_ROM_expected_prev[4];
	end
	if (
		( Direccion_ROM_expected_prev[5] !== 1'bx ) && ( Direccion_ROM_prev[5] !== Direccion_ROM_expected_prev[5] )
		&& ((Direccion_ROM_expected_prev[5] !== last_Direccion_ROM_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Direccion_ROM_exp[5] = Direccion_ROM_expected_prev[5];
	end
	if (
		( Direccion_ROM_expected_prev[6] !== 1'bx ) && ( Direccion_ROM_prev[6] !== Direccion_ROM_expected_prev[6] )
		&& ((Direccion_ROM_expected_prev[6] !== last_Direccion_ROM_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Direccion_ROM_exp[6] = Direccion_ROM_expected_prev[6];
	end
	if (
		( Direccion_ROM_expected_prev[7] !== 1'bx ) && ( Direccion_ROM_prev[7] !== Direccion_ROM_expected_prev[7] )
		&& ((Direccion_ROM_expected_prev[7] !== last_Direccion_ROM_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Direccion_ROM_exp[7] = Direccion_ROM_expected_prev[7];
	end
	if (
		( Direccion_ROM_expected_prev[8] !== 1'bx ) && ( Direccion_ROM_prev[8] !== Direccion_ROM_expected_prev[8] )
		&& ((Direccion_ROM_expected_prev[8] !== last_Direccion_ROM_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Direccion_ROM_exp[8] = Direccion_ROM_expected_prev[8];
	end
	if (
		( Direccion_ROM_expected_prev[9] !== 1'bx ) && ( Direccion_ROM_prev[9] !== Direccion_ROM_expected_prev[9] )
		&& ((Direccion_ROM_expected_prev[9] !== last_Direccion_ROM_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Direccion_ROM_exp[9] = Direccion_ROM_expected_prev[9];
	end
	if (
		( PC_DR_expected_prev[0] !== 1'bx ) && ( PC_DR_prev[0] !== PC_DR_expected_prev[0] )
		&& ((PC_DR_expected_prev[0] !== last_PC_DR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DR_expected_prev);
		$display ("     Real value = %b", PC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_DR_exp[0] = PC_DR_expected_prev[0];
	end
	if (
		( PC_DR_expected_prev[1] !== 1'bx ) && ( PC_DR_prev[1] !== PC_DR_expected_prev[1] )
		&& ((PC_DR_expected_prev[1] !== last_PC_DR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DR_expected_prev);
		$display ("     Real value = %b", PC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_DR_exp[1] = PC_DR_expected_prev[1];
	end
	if (
		( PC_DR_expected_prev[2] !== 1'bx ) && ( PC_DR_prev[2] !== PC_DR_expected_prev[2] )
		&& ((PC_DR_expected_prev[2] !== last_PC_DR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DR_expected_prev);
		$display ("     Real value = %b", PC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_DR_exp[2] = PC_DR_expected_prev[2];
	end
	if (
		( PC_DR_expected_prev[3] !== 1'bx ) && ( PC_DR_prev[3] !== PC_DR_expected_prev[3] )
		&& ((PC_DR_expected_prev[3] !== last_PC_DR_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DR_expected_prev);
		$display ("     Real value = %b", PC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_DR_exp[3] = PC_DR_expected_prev[3];
	end
	if (
		( PC_DR_expected_prev[4] !== 1'bx ) && ( PC_DR_prev[4] !== PC_DR_expected_prev[4] )
		&& ((PC_DR_expected_prev[4] !== last_PC_DR_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DR_expected_prev);
		$display ("     Real value = %b", PC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_DR_exp[4] = PC_DR_expected_prev[4];
	end
	if (
		( PC_DR_expected_prev[5] !== 1'bx ) && ( PC_DR_prev[5] !== PC_DR_expected_prev[5] )
		&& ((PC_DR_expected_prev[5] !== last_PC_DR_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DR_expected_prev);
		$display ("     Real value = %b", PC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_DR_exp[5] = PC_DR_expected_prev[5];
	end
	if (
		( PC_DR_expected_prev[6] !== 1'bx ) && ( PC_DR_prev[6] !== PC_DR_expected_prev[6] )
		&& ((PC_DR_expected_prev[6] !== last_PC_DR_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DR_expected_prev);
		$display ("     Real value = %b", PC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_DR_exp[6] = PC_DR_expected_prev[6];
	end
	if (
		( PC_DR_expected_prev[7] !== 1'bx ) && ( PC_DR_prev[7] !== PC_DR_expected_prev[7] )
		&& ((PC_DR_expected_prev[7] !== last_PC_DR_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DR_expected_prev);
		$display ("     Real value = %b", PC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_DR_exp[7] = PC_DR_expected_prev[7];
	end
	if (
		( PC_DR_expected_prev[8] !== 1'bx ) && ( PC_DR_prev[8] !== PC_DR_expected_prev[8] )
		&& ((PC_DR_expected_prev[8] !== last_PC_DR_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DR_expected_prev);
		$display ("     Real value = %b", PC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_DR_exp[8] = PC_DR_expected_prev[8];
	end
	if (
		( PC_DR_expected_prev[9] !== 1'bx ) && ( PC_DR_prev[9] !== PC_DR_expected_prev[9] )
		&& ((PC_DR_expected_prev[9] !== last_PC_DR_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DR_expected_prev);
		$display ("     Real value = %b", PC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_DR_exp[9] = PC_DR_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] AR_PC;
reg [3:0] CU_PC;
reg [9:0] Direccion_Interrupcion_PC;
reg [9:0] DR_PC;
reg Reloj;
reg Restaurar;
// wires                                               
wire [9:0] Direccion_ROM;
wire [9:0] PC_DR;

wire sampler;                             

// assign statements (if any)                          
PC i1 (
// port map - connection between master ports and signals/registers   
	.AR_PC(AR_PC),
	.CU_PC(CU_PC),
	.Direccion_Interrupcion_PC(Direccion_Interrupcion_PC),
	.Direccion_ROM(Direccion_ROM),
	.DR_PC(DR_PC),
	.PC_DR(PC_DR),
	.Reloj(Reloj),
	.Restaurar(Restaurar)
);
// AR_PC[ 9 ]
initial
begin
	AR_PC[9] = 1'b0;
end 
// AR_PC[ 8 ]
initial
begin
	AR_PC[8] = 1'b0;
end 
// AR_PC[ 7 ]
initial
begin
	AR_PC[7] = 1'b0;
end 
// AR_PC[ 6 ]
initial
begin
	AR_PC[6] = 1'b0;
end 
// AR_PC[ 5 ]
initial
begin
	AR_PC[5] = 1'b0;
end 
// AR_PC[ 4 ]
initial
begin
	AR_PC[4] = 1'b1;
end 
// AR_PC[ 3 ]
initial
begin
	AR_PC[3] = 1'b0;
end 
// AR_PC[ 2 ]
initial
begin
	AR_PC[2] = 1'b1;
end 
// AR_PC[ 1 ]
initial
begin
	AR_PC[1] = 1'b1;
end 
// AR_PC[ 0 ]
initial
begin
	AR_PC[0] = 1'b1;
end 
// CU_PC[ 3 ]
initial
begin
	CU_PC[3] = 1'b0;
end 
// CU_PC[ 2 ]
initial
begin
	CU_PC[2] = 1'b0;
end 
// CU_PC[ 1 ]
initial
begin
	CU_PC[1] = 1'b0;
	CU_PC[1] = #170000 1'b1;
	CU_PC[1] = #20000 1'b0;
end 
// CU_PC[ 0 ]
initial
begin
	CU_PC[0] = 1'b0;
	CU_PC[0] = #170000 1'b1;
	CU_PC[0] = #20000 1'b0;
end 
// Direccion_Interrupcion_PC[ 9 ]
initial
begin
	Direccion_Interrupcion_PC[9] = 1'b0;
end 
// Direccion_Interrupcion_PC[ 8 ]
initial
begin
	Direccion_Interrupcion_PC[8] = 1'b0;
end 
// Direccion_Interrupcion_PC[ 7 ]
initial
begin
	Direccion_Interrupcion_PC[7] = 1'b0;
end 
// Direccion_Interrupcion_PC[ 6 ]
initial
begin
	Direccion_Interrupcion_PC[6] = 1'b0;
end 
// Direccion_Interrupcion_PC[ 5 ]
initial
begin
	Direccion_Interrupcion_PC[5] = 1'b1;
end 
// Direccion_Interrupcion_PC[ 4 ]
initial
begin
	Direccion_Interrupcion_PC[4] = 1'b0;
end 
// Direccion_Interrupcion_PC[ 3 ]
initial
begin
	Direccion_Interrupcion_PC[3] = 1'b0;
end 
// Direccion_Interrupcion_PC[ 2 ]
initial
begin
	Direccion_Interrupcion_PC[2] = 1'b1;
end 
// Direccion_Interrupcion_PC[ 1 ]
initial
begin
	Direccion_Interrupcion_PC[1] = 1'b1;
end 
// Direccion_Interrupcion_PC[ 0 ]
initial
begin
	Direccion_Interrupcion_PC[0] = 1'b0;
end 
// DR_PC[ 9 ]
initial
begin
	DR_PC[9] = 1'b0;
end 
// DR_PC[ 8 ]
initial
begin
	DR_PC[8] = 1'b0;
end 
// DR_PC[ 7 ]
initial
begin
	DR_PC[7] = 1'b0;
end 
// DR_PC[ 6 ]
initial
begin
	DR_PC[6] = 1'b0;
end 
// DR_PC[ 5 ]
initial
begin
	DR_PC[5] = 1'b0;
end 
// DR_PC[ 4 ]
initial
begin
	DR_PC[4] = 1'b1;
end 
// DR_PC[ 3 ]
initial
begin
	DR_PC[3] = 1'b1;
end 
// DR_PC[ 2 ]
initial
begin
	DR_PC[2] = 1'b1;
end 
// DR_PC[ 1 ]
initial
begin
	DR_PC[1] = 1'b1;
end 
// DR_PC[ 0 ]
initial
begin
	DR_PC[0] = 1'b0;
end 

// Reloj
always
begin
	Reloj = 1'b0;
	Reloj = #10000 1'b1;
	#10000;
end 

// Restaurar
initial
begin
	Restaurar = 1'b0;
end 

PC_vlg_sample_tst tb_sample (
	.AR_PC(AR_PC),
	.CU_PC(CU_PC),
	.Direccion_Interrupcion_PC(Direccion_Interrupcion_PC),
	.DR_PC(DR_PC),
	.Reloj(Reloj),
	.Restaurar(Restaurar),
	.sampler_tx(sampler)
);

PC_vlg_check_tst tb_out(
	.Direccion_ROM(Direccion_ROM),
	.PC_DR(PC_DR),
	.sampler_rx(sampler)
);
endmodule

