// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/15/2020 18:43:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Sistema
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Sistema_vlg_sample_tst(
	Enter,
	Interrupciones,
	Reloj,
	Restaurar,
	sampler_tx
);
input  Enter;
input  Interrupciones;
input  Reloj;
input  Restaurar;
output sampler_tx;

reg sample;
time current_time;
always @(Enter or Interrupciones or Reloj or Restaurar)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Sistema_vlg_check_tst (
	AC_DR,
	DATO_RWM,
	DATO_RWM_Out,
	Direccion_ROM,
	DIRECCION_RWM,
	sampler_rx
);
input [15:0] AC_DR;
input [15:0] DATO_RWM;
input [15:0] DATO_RWM_Out;
input [9:0] Direccion_ROM;
input [9:0] DIRECCION_RWM;
input sampler_rx;

reg [15:0] AC_DR_expected;
reg [15:0] DATO_RWM_expected;
reg [15:0] DATO_RWM_Out_expected;
reg [9:0] Direccion_ROM_expected;
reg [9:0] DIRECCION_RWM_expected;

reg [15:0] AC_DR_prev;
reg [15:0] DATO_RWM_prev;
reg [15:0] DATO_RWM_Out_prev;
reg [9:0] Direccion_ROM_prev;
reg [9:0] DIRECCION_RWM_prev;

reg [15:0] AC_DR_expected_prev;
reg [15:0] DATO_RWM_expected_prev;
reg [15:0] DATO_RWM_Out_expected_prev;
reg [9:0] Direccion_ROM_expected_prev;
reg [9:0] DIRECCION_RWM_expected_prev;

reg [15:0] last_AC_DR_exp;
reg [15:0] last_DATO_RWM_exp;
reg [15:0] last_DATO_RWM_Out_exp;
reg [9:0] last_Direccion_ROM_exp;
reg [9:0] last_DIRECCION_RWM_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	AC_DR_prev = AC_DR;
	DATO_RWM_prev = DATO_RWM;
	DATO_RWM_Out_prev = DATO_RWM_Out;
	Direccion_ROM_prev = Direccion_ROM;
	DIRECCION_RWM_prev = DIRECCION_RWM;
end

// update expected /o prevs

always @(trigger)
begin
	AC_DR_expected_prev = AC_DR_expected;
	DATO_RWM_expected_prev = DATO_RWM_expected;
	DATO_RWM_Out_expected_prev = DATO_RWM_Out_expected;
	Direccion_ROM_expected_prev = Direccion_ROM_expected;
	DIRECCION_RWM_expected_prev = DIRECCION_RWM_expected;
end


// expected AC_DR[ 15 ]
initial
begin
	AC_DR_expected[15] = 1'bX;
end 
// expected AC_DR[ 14 ]
initial
begin
	AC_DR_expected[14] = 1'bX;
end 
// expected AC_DR[ 13 ]
initial
begin
	AC_DR_expected[13] = 1'bX;
end 
// expected AC_DR[ 12 ]
initial
begin
	AC_DR_expected[12] = 1'bX;
end 
// expected AC_DR[ 11 ]
initial
begin
	AC_DR_expected[11] = 1'bX;
end 
// expected AC_DR[ 10 ]
initial
begin
	AC_DR_expected[10] = 1'bX;
end 
// expected AC_DR[ 9 ]
initial
begin
	AC_DR_expected[9] = 1'bX;
end 
// expected AC_DR[ 8 ]
initial
begin
	AC_DR_expected[8] = 1'bX;
end 
// expected AC_DR[ 7 ]
initial
begin
	AC_DR_expected[7] = 1'bX;
end 
// expected AC_DR[ 6 ]
initial
begin
	AC_DR_expected[6] = 1'bX;
end 
// expected AC_DR[ 5 ]
initial
begin
	AC_DR_expected[5] = 1'bX;
end 
// expected AC_DR[ 4 ]
initial
begin
	AC_DR_expected[4] = 1'bX;
end 
// expected AC_DR[ 3 ]
initial
begin
	AC_DR_expected[3] = 1'bX;
end 
// expected AC_DR[ 2 ]
initial
begin
	AC_DR_expected[2] = 1'bX;
end 
// expected AC_DR[ 1 ]
initial
begin
	AC_DR_expected[1] = 1'bX;
end 
// expected AC_DR[ 0 ]
initial
begin
	AC_DR_expected[0] = 1'bX;
end 
// expected DATO_RWM[ 15 ]
initial
begin
	DATO_RWM_expected[15] = 1'bX;
end 
// expected DATO_RWM[ 14 ]
initial
begin
	DATO_RWM_expected[14] = 1'bX;
end 
// expected DATO_RWM[ 13 ]
initial
begin
	DATO_RWM_expected[13] = 1'bX;
end 
// expected DATO_RWM[ 12 ]
initial
begin
	DATO_RWM_expected[12] = 1'bX;
end 
// expected DATO_RWM[ 11 ]
initial
begin
	DATO_RWM_expected[11] = 1'bX;
end 
// expected DATO_RWM[ 10 ]
initial
begin
	DATO_RWM_expected[10] = 1'bX;
end 
// expected DATO_RWM[ 9 ]
initial
begin
	DATO_RWM_expected[9] = 1'bX;
end 
// expected DATO_RWM[ 8 ]
initial
begin
	DATO_RWM_expected[8] = 1'bX;
end 
// expected DATO_RWM[ 7 ]
initial
begin
	DATO_RWM_expected[7] = 1'bX;
end 
// expected DATO_RWM[ 6 ]
initial
begin
	DATO_RWM_expected[6] = 1'bX;
end 
// expected DATO_RWM[ 5 ]
initial
begin
	DATO_RWM_expected[5] = 1'bX;
end 
// expected DATO_RWM[ 4 ]
initial
begin
	DATO_RWM_expected[4] = 1'bX;
end 
// expected DATO_RWM[ 3 ]
initial
begin
	DATO_RWM_expected[3] = 1'bX;
end 
// expected DATO_RWM[ 2 ]
initial
begin
	DATO_RWM_expected[2] = 1'bX;
end 
// expected DATO_RWM[ 1 ]
initial
begin
	DATO_RWM_expected[1] = 1'bX;
end 
// expected DATO_RWM[ 0 ]
initial
begin
	DATO_RWM_expected[0] = 1'bX;
end 
// expected DATO_RWM_Out[ 15 ]
initial
begin
	DATO_RWM_Out_expected[15] = 1'bX;
end 
// expected DATO_RWM_Out[ 14 ]
initial
begin
	DATO_RWM_Out_expected[14] = 1'bX;
end 
// expected DATO_RWM_Out[ 13 ]
initial
begin
	DATO_RWM_Out_expected[13] = 1'bX;
end 
// expected DATO_RWM_Out[ 12 ]
initial
begin
	DATO_RWM_Out_expected[12] = 1'bX;
end 
// expected DATO_RWM_Out[ 11 ]
initial
begin
	DATO_RWM_Out_expected[11] = 1'bX;
end 
// expected DATO_RWM_Out[ 10 ]
initial
begin
	DATO_RWM_Out_expected[10] = 1'bX;
end 
// expected DATO_RWM_Out[ 9 ]
initial
begin
	DATO_RWM_Out_expected[9] = 1'bX;
end 
// expected DATO_RWM_Out[ 8 ]
initial
begin
	DATO_RWM_Out_expected[8] = 1'bX;
end 
// expected DATO_RWM_Out[ 7 ]
initial
begin
	DATO_RWM_Out_expected[7] = 1'bX;
end 
// expected DATO_RWM_Out[ 6 ]
initial
begin
	DATO_RWM_Out_expected[6] = 1'bX;
end 
// expected DATO_RWM_Out[ 5 ]
initial
begin
	DATO_RWM_Out_expected[5] = 1'bX;
end 
// expected DATO_RWM_Out[ 4 ]
initial
begin
	DATO_RWM_Out_expected[4] = 1'bX;
end 
// expected DATO_RWM_Out[ 3 ]
initial
begin
	DATO_RWM_Out_expected[3] = 1'bX;
end 
// expected DATO_RWM_Out[ 2 ]
initial
begin
	DATO_RWM_Out_expected[2] = 1'bX;
end 
// expected DATO_RWM_Out[ 1 ]
initial
begin
	DATO_RWM_Out_expected[1] = 1'bX;
end 
// expected DATO_RWM_Out[ 0 ]
initial
begin
	DATO_RWM_Out_expected[0] = 1'bX;
end 
// expected Direccion_ROM[ 9 ]
initial
begin
	Direccion_ROM_expected[9] = 1'bX;
end 
// expected Direccion_ROM[ 8 ]
initial
begin
	Direccion_ROM_expected[8] = 1'bX;
end 
// expected Direccion_ROM[ 7 ]
initial
begin
	Direccion_ROM_expected[7] = 1'bX;
end 
// expected Direccion_ROM[ 6 ]
initial
begin
	Direccion_ROM_expected[6] = 1'bX;
end 
// expected Direccion_ROM[ 5 ]
initial
begin
	Direccion_ROM_expected[5] = 1'bX;
end 
// expected Direccion_ROM[ 4 ]
initial
begin
	Direccion_ROM_expected[4] = 1'bX;
end 
// expected Direccion_ROM[ 3 ]
initial
begin
	Direccion_ROM_expected[3] = 1'bX;
end 
// expected Direccion_ROM[ 2 ]
initial
begin
	Direccion_ROM_expected[2] = 1'bX;
end 
// expected Direccion_ROM[ 1 ]
initial
begin
	Direccion_ROM_expected[1] = 1'bX;
end 
// expected Direccion_ROM[ 0 ]
initial
begin
	Direccion_ROM_expected[0] = 1'bX;
end 
// expected DIRECCION_RWM[ 9 ]
initial
begin
	DIRECCION_RWM_expected[9] = 1'bX;
end 
// expected DIRECCION_RWM[ 8 ]
initial
begin
	DIRECCION_RWM_expected[8] = 1'bX;
end 
// expected DIRECCION_RWM[ 7 ]
initial
begin
	DIRECCION_RWM_expected[7] = 1'bX;
end 
// expected DIRECCION_RWM[ 6 ]
initial
begin
	DIRECCION_RWM_expected[6] = 1'bX;
end 
// expected DIRECCION_RWM[ 5 ]
initial
begin
	DIRECCION_RWM_expected[5] = 1'bX;
end 
// expected DIRECCION_RWM[ 4 ]
initial
begin
	DIRECCION_RWM_expected[4] = 1'bX;
end 
// expected DIRECCION_RWM[ 3 ]
initial
begin
	DIRECCION_RWM_expected[3] = 1'bX;
end 
// expected DIRECCION_RWM[ 2 ]
initial
begin
	DIRECCION_RWM_expected[2] = 1'bX;
end 
// expected DIRECCION_RWM[ 1 ]
initial
begin
	DIRECCION_RWM_expected[1] = 1'bX;
end 
// expected DIRECCION_RWM[ 0 ]
initial
begin
	DIRECCION_RWM_expected[0] = 1'bX;
end 
// generate trigger
always @(AC_DR_expected or AC_DR or DATO_RWM_expected or DATO_RWM or DATO_RWM_Out_expected or DATO_RWM_Out or Direccion_ROM_expected or Direccion_ROM or DIRECCION_RWM_expected or DIRECCION_RWM)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AC_DR = %b | expected DATO_RWM = %b | expected DATO_RWM_Out = %b | expected Direccion_ROM = %b | expected DIRECCION_RWM = %b | ",AC_DR_expected_prev,DATO_RWM_expected_prev,DATO_RWM_Out_expected_prev,Direccion_ROM_expected_prev,DIRECCION_RWM_expected_prev);
	$display("| real AC_DR = %b | real DATO_RWM = %b | real DATO_RWM_Out = %b | real Direccion_ROM = %b | real DIRECCION_RWM = %b | ",AC_DR_prev,DATO_RWM_prev,DATO_RWM_Out_prev,Direccion_ROM_prev,DIRECCION_RWM_prev);
`endif
	if (
		( AC_DR_expected_prev[0] !== 1'bx ) && ( AC_DR_prev[0] !== AC_DR_expected_prev[0] )
		&& ((AC_DR_expected_prev[0] !== last_AC_DR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[0] = AC_DR_expected_prev[0];
	end
	if (
		( AC_DR_expected_prev[1] !== 1'bx ) && ( AC_DR_prev[1] !== AC_DR_expected_prev[1] )
		&& ((AC_DR_expected_prev[1] !== last_AC_DR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[1] = AC_DR_expected_prev[1];
	end
	if (
		( AC_DR_expected_prev[2] !== 1'bx ) && ( AC_DR_prev[2] !== AC_DR_expected_prev[2] )
		&& ((AC_DR_expected_prev[2] !== last_AC_DR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[2] = AC_DR_expected_prev[2];
	end
	if (
		( AC_DR_expected_prev[3] !== 1'bx ) && ( AC_DR_prev[3] !== AC_DR_expected_prev[3] )
		&& ((AC_DR_expected_prev[3] !== last_AC_DR_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[3] = AC_DR_expected_prev[3];
	end
	if (
		( AC_DR_expected_prev[4] !== 1'bx ) && ( AC_DR_prev[4] !== AC_DR_expected_prev[4] )
		&& ((AC_DR_expected_prev[4] !== last_AC_DR_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[4] = AC_DR_expected_prev[4];
	end
	if (
		( AC_DR_expected_prev[5] !== 1'bx ) && ( AC_DR_prev[5] !== AC_DR_expected_prev[5] )
		&& ((AC_DR_expected_prev[5] !== last_AC_DR_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[5] = AC_DR_expected_prev[5];
	end
	if (
		( AC_DR_expected_prev[6] !== 1'bx ) && ( AC_DR_prev[6] !== AC_DR_expected_prev[6] )
		&& ((AC_DR_expected_prev[6] !== last_AC_DR_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[6] = AC_DR_expected_prev[6];
	end
	if (
		( AC_DR_expected_prev[7] !== 1'bx ) && ( AC_DR_prev[7] !== AC_DR_expected_prev[7] )
		&& ((AC_DR_expected_prev[7] !== last_AC_DR_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[7] = AC_DR_expected_prev[7];
	end
	if (
		( AC_DR_expected_prev[8] !== 1'bx ) && ( AC_DR_prev[8] !== AC_DR_expected_prev[8] )
		&& ((AC_DR_expected_prev[8] !== last_AC_DR_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[8] = AC_DR_expected_prev[8];
	end
	if (
		( AC_DR_expected_prev[9] !== 1'bx ) && ( AC_DR_prev[9] !== AC_DR_expected_prev[9] )
		&& ((AC_DR_expected_prev[9] !== last_AC_DR_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[9] = AC_DR_expected_prev[9];
	end
	if (
		( AC_DR_expected_prev[10] !== 1'bx ) && ( AC_DR_prev[10] !== AC_DR_expected_prev[10] )
		&& ((AC_DR_expected_prev[10] !== last_AC_DR_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[10] = AC_DR_expected_prev[10];
	end
	if (
		( AC_DR_expected_prev[11] !== 1'bx ) && ( AC_DR_prev[11] !== AC_DR_expected_prev[11] )
		&& ((AC_DR_expected_prev[11] !== last_AC_DR_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[11] = AC_DR_expected_prev[11];
	end
	if (
		( AC_DR_expected_prev[12] !== 1'bx ) && ( AC_DR_prev[12] !== AC_DR_expected_prev[12] )
		&& ((AC_DR_expected_prev[12] !== last_AC_DR_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[12] = AC_DR_expected_prev[12];
	end
	if (
		( AC_DR_expected_prev[13] !== 1'bx ) && ( AC_DR_prev[13] !== AC_DR_expected_prev[13] )
		&& ((AC_DR_expected_prev[13] !== last_AC_DR_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[13] = AC_DR_expected_prev[13];
	end
	if (
		( AC_DR_expected_prev[14] !== 1'bx ) && ( AC_DR_prev[14] !== AC_DR_expected_prev[14] )
		&& ((AC_DR_expected_prev[14] !== last_AC_DR_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[14] = AC_DR_expected_prev[14];
	end
	if (
		( AC_DR_expected_prev[15] !== 1'bx ) && ( AC_DR_prev[15] !== AC_DR_expected_prev[15] )
		&& ((AC_DR_expected_prev[15] !== last_AC_DR_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_DR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_DR_expected_prev);
		$display ("     Real value = %b", AC_DR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_DR_exp[15] = AC_DR_expected_prev[15];
	end
	if (
		( DATO_RWM_expected_prev[0] !== 1'bx ) && ( DATO_RWM_prev[0] !== DATO_RWM_expected_prev[0] )
		&& ((DATO_RWM_expected_prev[0] !== last_DATO_RWM_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[0] = DATO_RWM_expected_prev[0];
	end
	if (
		( DATO_RWM_expected_prev[1] !== 1'bx ) && ( DATO_RWM_prev[1] !== DATO_RWM_expected_prev[1] )
		&& ((DATO_RWM_expected_prev[1] !== last_DATO_RWM_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[1] = DATO_RWM_expected_prev[1];
	end
	if (
		( DATO_RWM_expected_prev[2] !== 1'bx ) && ( DATO_RWM_prev[2] !== DATO_RWM_expected_prev[2] )
		&& ((DATO_RWM_expected_prev[2] !== last_DATO_RWM_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[2] = DATO_RWM_expected_prev[2];
	end
	if (
		( DATO_RWM_expected_prev[3] !== 1'bx ) && ( DATO_RWM_prev[3] !== DATO_RWM_expected_prev[3] )
		&& ((DATO_RWM_expected_prev[3] !== last_DATO_RWM_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[3] = DATO_RWM_expected_prev[3];
	end
	if (
		( DATO_RWM_expected_prev[4] !== 1'bx ) && ( DATO_RWM_prev[4] !== DATO_RWM_expected_prev[4] )
		&& ((DATO_RWM_expected_prev[4] !== last_DATO_RWM_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[4] = DATO_RWM_expected_prev[4];
	end
	if (
		( DATO_RWM_expected_prev[5] !== 1'bx ) && ( DATO_RWM_prev[5] !== DATO_RWM_expected_prev[5] )
		&& ((DATO_RWM_expected_prev[5] !== last_DATO_RWM_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[5] = DATO_RWM_expected_prev[5];
	end
	if (
		( DATO_RWM_expected_prev[6] !== 1'bx ) && ( DATO_RWM_prev[6] !== DATO_RWM_expected_prev[6] )
		&& ((DATO_RWM_expected_prev[6] !== last_DATO_RWM_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[6] = DATO_RWM_expected_prev[6];
	end
	if (
		( DATO_RWM_expected_prev[7] !== 1'bx ) && ( DATO_RWM_prev[7] !== DATO_RWM_expected_prev[7] )
		&& ((DATO_RWM_expected_prev[7] !== last_DATO_RWM_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[7] = DATO_RWM_expected_prev[7];
	end
	if (
		( DATO_RWM_expected_prev[8] !== 1'bx ) && ( DATO_RWM_prev[8] !== DATO_RWM_expected_prev[8] )
		&& ((DATO_RWM_expected_prev[8] !== last_DATO_RWM_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[8] = DATO_RWM_expected_prev[8];
	end
	if (
		( DATO_RWM_expected_prev[9] !== 1'bx ) && ( DATO_RWM_prev[9] !== DATO_RWM_expected_prev[9] )
		&& ((DATO_RWM_expected_prev[9] !== last_DATO_RWM_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[9] = DATO_RWM_expected_prev[9];
	end
	if (
		( DATO_RWM_expected_prev[10] !== 1'bx ) && ( DATO_RWM_prev[10] !== DATO_RWM_expected_prev[10] )
		&& ((DATO_RWM_expected_prev[10] !== last_DATO_RWM_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[10] = DATO_RWM_expected_prev[10];
	end
	if (
		( DATO_RWM_expected_prev[11] !== 1'bx ) && ( DATO_RWM_prev[11] !== DATO_RWM_expected_prev[11] )
		&& ((DATO_RWM_expected_prev[11] !== last_DATO_RWM_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[11] = DATO_RWM_expected_prev[11];
	end
	if (
		( DATO_RWM_expected_prev[12] !== 1'bx ) && ( DATO_RWM_prev[12] !== DATO_RWM_expected_prev[12] )
		&& ((DATO_RWM_expected_prev[12] !== last_DATO_RWM_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[12] = DATO_RWM_expected_prev[12];
	end
	if (
		( DATO_RWM_expected_prev[13] !== 1'bx ) && ( DATO_RWM_prev[13] !== DATO_RWM_expected_prev[13] )
		&& ((DATO_RWM_expected_prev[13] !== last_DATO_RWM_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[13] = DATO_RWM_expected_prev[13];
	end
	if (
		( DATO_RWM_expected_prev[14] !== 1'bx ) && ( DATO_RWM_prev[14] !== DATO_RWM_expected_prev[14] )
		&& ((DATO_RWM_expected_prev[14] !== last_DATO_RWM_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[14] = DATO_RWM_expected_prev[14];
	end
	if (
		( DATO_RWM_expected_prev[15] !== 1'bx ) && ( DATO_RWM_prev[15] !== DATO_RWM_expected_prev[15] )
		&& ((DATO_RWM_expected_prev[15] !== last_DATO_RWM_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_expected_prev);
		$display ("     Real value = %b", DATO_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATO_RWM_exp[15] = DATO_RWM_expected_prev[15];
	end
	if (
		( DATO_RWM_Out_expected_prev[0] !== 1'bx ) && ( DATO_RWM_Out_prev[0] !== DATO_RWM_Out_expected_prev[0] )
		&& ((DATO_RWM_Out_expected_prev[0] !== last_DATO_RWM_Out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[0] = DATO_RWM_Out_expected_prev[0];
	end
	if (
		( DATO_RWM_Out_expected_prev[1] !== 1'bx ) && ( DATO_RWM_Out_prev[1] !== DATO_RWM_Out_expected_prev[1] )
		&& ((DATO_RWM_Out_expected_prev[1] !== last_DATO_RWM_Out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[1] = DATO_RWM_Out_expected_prev[1];
	end
	if (
		( DATO_RWM_Out_expected_prev[2] !== 1'bx ) && ( DATO_RWM_Out_prev[2] !== DATO_RWM_Out_expected_prev[2] )
		&& ((DATO_RWM_Out_expected_prev[2] !== last_DATO_RWM_Out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[2] = DATO_RWM_Out_expected_prev[2];
	end
	if (
		( DATO_RWM_Out_expected_prev[3] !== 1'bx ) && ( DATO_RWM_Out_prev[3] !== DATO_RWM_Out_expected_prev[3] )
		&& ((DATO_RWM_Out_expected_prev[3] !== last_DATO_RWM_Out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[3] = DATO_RWM_Out_expected_prev[3];
	end
	if (
		( DATO_RWM_Out_expected_prev[4] !== 1'bx ) && ( DATO_RWM_Out_prev[4] !== DATO_RWM_Out_expected_prev[4] )
		&& ((DATO_RWM_Out_expected_prev[4] !== last_DATO_RWM_Out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[4] = DATO_RWM_Out_expected_prev[4];
	end
	if (
		( DATO_RWM_Out_expected_prev[5] !== 1'bx ) && ( DATO_RWM_Out_prev[5] !== DATO_RWM_Out_expected_prev[5] )
		&& ((DATO_RWM_Out_expected_prev[5] !== last_DATO_RWM_Out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[5] = DATO_RWM_Out_expected_prev[5];
	end
	if (
		( DATO_RWM_Out_expected_prev[6] !== 1'bx ) && ( DATO_RWM_Out_prev[6] !== DATO_RWM_Out_expected_prev[6] )
		&& ((DATO_RWM_Out_expected_prev[6] !== last_DATO_RWM_Out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[6] = DATO_RWM_Out_expected_prev[6];
	end
	if (
		( DATO_RWM_Out_expected_prev[7] !== 1'bx ) && ( DATO_RWM_Out_prev[7] !== DATO_RWM_Out_expected_prev[7] )
		&& ((DATO_RWM_Out_expected_prev[7] !== last_DATO_RWM_Out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[7] = DATO_RWM_Out_expected_prev[7];
	end
	if (
		( DATO_RWM_Out_expected_prev[8] !== 1'bx ) && ( DATO_RWM_Out_prev[8] !== DATO_RWM_Out_expected_prev[8] )
		&& ((DATO_RWM_Out_expected_prev[8] !== last_DATO_RWM_Out_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[8] = DATO_RWM_Out_expected_prev[8];
	end
	if (
		( DATO_RWM_Out_expected_prev[9] !== 1'bx ) && ( DATO_RWM_Out_prev[9] !== DATO_RWM_Out_expected_prev[9] )
		&& ((DATO_RWM_Out_expected_prev[9] !== last_DATO_RWM_Out_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[9] = DATO_RWM_Out_expected_prev[9];
	end
	if (
		( DATO_RWM_Out_expected_prev[10] !== 1'bx ) && ( DATO_RWM_Out_prev[10] !== DATO_RWM_Out_expected_prev[10] )
		&& ((DATO_RWM_Out_expected_prev[10] !== last_DATO_RWM_Out_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[10] = DATO_RWM_Out_expected_prev[10];
	end
	if (
		( DATO_RWM_Out_expected_prev[11] !== 1'bx ) && ( DATO_RWM_Out_prev[11] !== DATO_RWM_Out_expected_prev[11] )
		&& ((DATO_RWM_Out_expected_prev[11] !== last_DATO_RWM_Out_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[11] = DATO_RWM_Out_expected_prev[11];
	end
	if (
		( DATO_RWM_Out_expected_prev[12] !== 1'bx ) && ( DATO_RWM_Out_prev[12] !== DATO_RWM_Out_expected_prev[12] )
		&& ((DATO_RWM_Out_expected_prev[12] !== last_DATO_RWM_Out_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[12] = DATO_RWM_Out_expected_prev[12];
	end
	if (
		( DATO_RWM_Out_expected_prev[13] !== 1'bx ) && ( DATO_RWM_Out_prev[13] !== DATO_RWM_Out_expected_prev[13] )
		&& ((DATO_RWM_Out_expected_prev[13] !== last_DATO_RWM_Out_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[13] = DATO_RWM_Out_expected_prev[13];
	end
	if (
		( DATO_RWM_Out_expected_prev[14] !== 1'bx ) && ( DATO_RWM_Out_prev[14] !== DATO_RWM_Out_expected_prev[14] )
		&& ((DATO_RWM_Out_expected_prev[14] !== last_DATO_RWM_Out_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[14] = DATO_RWM_Out_expected_prev[14];
	end
	if (
		( DATO_RWM_Out_expected_prev[15] !== 1'bx ) && ( DATO_RWM_Out_prev[15] !== DATO_RWM_Out_expected_prev[15] )
		&& ((DATO_RWM_Out_expected_prev[15] !== last_DATO_RWM_Out_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO_RWM_Out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_RWM_Out_expected_prev);
		$display ("     Real value = %b", DATO_RWM_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATO_RWM_Out_exp[15] = DATO_RWM_Out_expected_prev[15];
	end
	if (
		( Direccion_ROM_expected_prev[0] !== 1'bx ) && ( Direccion_ROM_prev[0] !== Direccion_ROM_expected_prev[0] )
		&& ((Direccion_ROM_expected_prev[0] !== last_Direccion_ROM_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Direccion_ROM_exp[0] = Direccion_ROM_expected_prev[0];
	end
	if (
		( Direccion_ROM_expected_prev[1] !== 1'bx ) && ( Direccion_ROM_prev[1] !== Direccion_ROM_expected_prev[1] )
		&& ((Direccion_ROM_expected_prev[1] !== last_Direccion_ROM_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Direccion_ROM_exp[1] = Direccion_ROM_expected_prev[1];
	end
	if (
		( Direccion_ROM_expected_prev[2] !== 1'bx ) && ( Direccion_ROM_prev[2] !== Direccion_ROM_expected_prev[2] )
		&& ((Direccion_ROM_expected_prev[2] !== last_Direccion_ROM_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Direccion_ROM_exp[2] = Direccion_ROM_expected_prev[2];
	end
	if (
		( Direccion_ROM_expected_prev[3] !== 1'bx ) && ( Direccion_ROM_prev[3] !== Direccion_ROM_expected_prev[3] )
		&& ((Direccion_ROM_expected_prev[3] !== last_Direccion_ROM_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Direccion_ROM_exp[3] = Direccion_ROM_expected_prev[3];
	end
	if (
		( Direccion_ROM_expected_prev[4] !== 1'bx ) && ( Direccion_ROM_prev[4] !== Direccion_ROM_expected_prev[4] )
		&& ((Direccion_ROM_expected_prev[4] !== last_Direccion_ROM_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Direccion_ROM_exp[4] = Direccion_ROM_expected_prev[4];
	end
	if (
		( Direccion_ROM_expected_prev[5] !== 1'bx ) && ( Direccion_ROM_prev[5] !== Direccion_ROM_expected_prev[5] )
		&& ((Direccion_ROM_expected_prev[5] !== last_Direccion_ROM_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Direccion_ROM_exp[5] = Direccion_ROM_expected_prev[5];
	end
	if (
		( Direccion_ROM_expected_prev[6] !== 1'bx ) && ( Direccion_ROM_prev[6] !== Direccion_ROM_expected_prev[6] )
		&& ((Direccion_ROM_expected_prev[6] !== last_Direccion_ROM_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Direccion_ROM_exp[6] = Direccion_ROM_expected_prev[6];
	end
	if (
		( Direccion_ROM_expected_prev[7] !== 1'bx ) && ( Direccion_ROM_prev[7] !== Direccion_ROM_expected_prev[7] )
		&& ((Direccion_ROM_expected_prev[7] !== last_Direccion_ROM_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Direccion_ROM_exp[7] = Direccion_ROM_expected_prev[7];
	end
	if (
		( Direccion_ROM_expected_prev[8] !== 1'bx ) && ( Direccion_ROM_prev[8] !== Direccion_ROM_expected_prev[8] )
		&& ((Direccion_ROM_expected_prev[8] !== last_Direccion_ROM_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Direccion_ROM_exp[8] = Direccion_ROM_expected_prev[8];
	end
	if (
		( Direccion_ROM_expected_prev[9] !== 1'bx ) && ( Direccion_ROM_prev[9] !== Direccion_ROM_expected_prev[9] )
		&& ((Direccion_ROM_expected_prev[9] !== last_Direccion_ROM_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Direccion_ROM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Direccion_ROM_expected_prev);
		$display ("     Real value = %b", Direccion_ROM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Direccion_ROM_exp[9] = Direccion_ROM_expected_prev[9];
	end
	if (
		( DIRECCION_RWM_expected_prev[0] !== 1'bx ) && ( DIRECCION_RWM_prev[0] !== DIRECCION_RWM_expected_prev[0] )
		&& ((DIRECCION_RWM_expected_prev[0] !== last_DIRECCION_RWM_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRECCION_RWM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRECCION_RWM_expected_prev);
		$display ("     Real value = %b", DIRECCION_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DIRECCION_RWM_exp[0] = DIRECCION_RWM_expected_prev[0];
	end
	if (
		( DIRECCION_RWM_expected_prev[1] !== 1'bx ) && ( DIRECCION_RWM_prev[1] !== DIRECCION_RWM_expected_prev[1] )
		&& ((DIRECCION_RWM_expected_prev[1] !== last_DIRECCION_RWM_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRECCION_RWM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRECCION_RWM_expected_prev);
		$display ("     Real value = %b", DIRECCION_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DIRECCION_RWM_exp[1] = DIRECCION_RWM_expected_prev[1];
	end
	if (
		( DIRECCION_RWM_expected_prev[2] !== 1'bx ) && ( DIRECCION_RWM_prev[2] !== DIRECCION_RWM_expected_prev[2] )
		&& ((DIRECCION_RWM_expected_prev[2] !== last_DIRECCION_RWM_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRECCION_RWM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRECCION_RWM_expected_prev);
		$display ("     Real value = %b", DIRECCION_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DIRECCION_RWM_exp[2] = DIRECCION_RWM_expected_prev[2];
	end
	if (
		( DIRECCION_RWM_expected_prev[3] !== 1'bx ) && ( DIRECCION_RWM_prev[3] !== DIRECCION_RWM_expected_prev[3] )
		&& ((DIRECCION_RWM_expected_prev[3] !== last_DIRECCION_RWM_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRECCION_RWM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRECCION_RWM_expected_prev);
		$display ("     Real value = %b", DIRECCION_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DIRECCION_RWM_exp[3] = DIRECCION_RWM_expected_prev[3];
	end
	if (
		( DIRECCION_RWM_expected_prev[4] !== 1'bx ) && ( DIRECCION_RWM_prev[4] !== DIRECCION_RWM_expected_prev[4] )
		&& ((DIRECCION_RWM_expected_prev[4] !== last_DIRECCION_RWM_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRECCION_RWM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRECCION_RWM_expected_prev);
		$display ("     Real value = %b", DIRECCION_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DIRECCION_RWM_exp[4] = DIRECCION_RWM_expected_prev[4];
	end
	if (
		( DIRECCION_RWM_expected_prev[5] !== 1'bx ) && ( DIRECCION_RWM_prev[5] !== DIRECCION_RWM_expected_prev[5] )
		&& ((DIRECCION_RWM_expected_prev[5] !== last_DIRECCION_RWM_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRECCION_RWM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRECCION_RWM_expected_prev);
		$display ("     Real value = %b", DIRECCION_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DIRECCION_RWM_exp[5] = DIRECCION_RWM_expected_prev[5];
	end
	if (
		( DIRECCION_RWM_expected_prev[6] !== 1'bx ) && ( DIRECCION_RWM_prev[6] !== DIRECCION_RWM_expected_prev[6] )
		&& ((DIRECCION_RWM_expected_prev[6] !== last_DIRECCION_RWM_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRECCION_RWM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRECCION_RWM_expected_prev);
		$display ("     Real value = %b", DIRECCION_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DIRECCION_RWM_exp[6] = DIRECCION_RWM_expected_prev[6];
	end
	if (
		( DIRECCION_RWM_expected_prev[7] !== 1'bx ) && ( DIRECCION_RWM_prev[7] !== DIRECCION_RWM_expected_prev[7] )
		&& ((DIRECCION_RWM_expected_prev[7] !== last_DIRECCION_RWM_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRECCION_RWM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRECCION_RWM_expected_prev);
		$display ("     Real value = %b", DIRECCION_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DIRECCION_RWM_exp[7] = DIRECCION_RWM_expected_prev[7];
	end
	if (
		( DIRECCION_RWM_expected_prev[8] !== 1'bx ) && ( DIRECCION_RWM_prev[8] !== DIRECCION_RWM_expected_prev[8] )
		&& ((DIRECCION_RWM_expected_prev[8] !== last_DIRECCION_RWM_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRECCION_RWM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRECCION_RWM_expected_prev);
		$display ("     Real value = %b", DIRECCION_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DIRECCION_RWM_exp[8] = DIRECCION_RWM_expected_prev[8];
	end
	if (
		( DIRECCION_RWM_expected_prev[9] !== 1'bx ) && ( DIRECCION_RWM_prev[9] !== DIRECCION_RWM_expected_prev[9] )
		&& ((DIRECCION_RWM_expected_prev[9] !== last_DIRECCION_RWM_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRECCION_RWM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRECCION_RWM_expected_prev);
		$display ("     Real value = %b", DIRECCION_RWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DIRECCION_RWM_exp[9] = DIRECCION_RWM_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Sistema_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Enter;
reg Interrupciones;
reg Reloj;
reg Restaurar;
// wires                                               
wire [15:0] AC_DR;
wire [15:0] DATO_RWM;
wire [15:0] DATO_RWM_Out;
wire [9:0] Direccion_ROM;
wire [9:0] DIRECCION_RWM;

wire sampler;                             

// assign statements (if any)                          
Sistema i1 (
// port map - connection between master ports and signals/registers   
	.AC_DR(AC_DR),
	.DATO_RWM(DATO_RWM),
	.DATO_RWM_Out(DATO_RWM_Out),
	.Direccion_ROM(Direccion_ROM),
	.DIRECCION_RWM(DIRECCION_RWM),
	.Enter(Enter),
	.Interrupciones(Interrupciones),
	.Reloj(Reloj),
	.Restaurar(Restaurar)
);

// Enter
initial
begin
	Enter = 1'b1;
	Enter = #20000 1'b0;
end 

// Interrupciones
initial
begin
	Interrupciones = 1'b0;
	Interrupciones = #20000 1'b1;
	Interrupciones = #60000 1'b0;
end 

// Reloj
always
begin
	Reloj = 1'b0;
	Reloj = #10000 1'b1;
	#10000;
end 

// Restaurar
initial
begin
	Restaurar = 1'b0;
end 

Sistema_vlg_sample_tst tb_sample (
	.Enter(Enter),
	.Interrupciones(Interrupciones),
	.Reloj(Reloj),
	.Restaurar(Restaurar),
	.sampler_tx(sampler)
);

Sistema_vlg_check_tst tb_out(
	.AC_DR(AC_DR),
	.DATO_RWM(DATO_RWM),
	.DATO_RWM_Out(DATO_RWM_Out),
	.Direccion_ROM(Direccion_ROM),
	.DIRECCION_RWM(DIRECCION_RWM),
	.sampler_rx(sampler)
);
endmodule

